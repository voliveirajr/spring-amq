<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:jms="http://www.springframework.org/schema/jms" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context-3.1.xsd
                           http://www.springframework.org/schema/jms 
                           http://www.springframework.org/schema/jms/spring-jms-3.1.xsd">

	<context:annotation-config />	
	<context:component-scan base-package="com.voliveirajr.spring.amq" />

	<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://10.0.0.15:61616" />
		<property name="redeliveryPolicy" ref="redeliveryPolicy" />
	</bean>

	<!-- Destination queue name -->
	<bean id="destination" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="com.hp.sierra.callback.poc" />
	</bean>
	
	<bean id="messageReceiver" class="com.hp.sierra.callback.CallbackMessageListener">
	</bean>

	<!-- Redelivery policy, will wait 10 seconds with exponencial growth by 2 for 5 times using the same queue -->
	<bean id="redeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy">
		<property name="useExponentialBackOff" value="true" />
		<property name="backOffMultiplier" value="2" />
		<property name="initialRedeliveryDelay" value="10000" />
		<property name="maximumRedeliveries" value="5" />
		<property name="queue" value="*" />
	</bean>

	<bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="destination" />
		<property name="messageListener" ref="messageReceiver" />
		<!-- transacted true defines that some exception will "NACK" the message and send to retry, a complete flow will "ACK" the message and remove from queue -->
		<property name="sessionTransacted" value="true" />
		<!-- defining 4 thread to consume from queue -->
		<property name="concurrentConsumers" value="4" />
		<property name="maxConcurrentConsumers" value="4" />
	</bean>

</beans>